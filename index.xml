<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Idiomatic Go</title>
    <link>http://idiomaticgo.com/index.xml</link>
    <description>Recent content on Idiomatic Go</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 16 Oct 2016 10:20:44 +0100</lastBuildDate>
    <atom:link href="http://idiomaticgo.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>idiomatic go tests</title>
      <link>http://idiomaticgo.com/post/testing/idiomatic-go-tests/</link>
      <pubDate>Sun, 16 Oct 2016 10:20:44 +0100</pubDate>
      
      <guid>http://idiomaticgo.com/post/testing/idiomatic-go-tests/</guid>
      <description>

&lt;p&gt;What does it mean to write idiomatic go tests? I will outline what it means to me and try to convey through details and examples what I wish I had known when starting out with Go.&lt;/p&gt;

&lt;h3 id=&#34;idiomatic-go-tests-are-written-using-the-builtin-testing-package&#34;&gt;Idiomatic go tests are written using the builtin testing package&lt;/h3&gt;

&lt;p&gt;Go comes with a builtin testing package. There is no need for an external testing package. Lets take a closer look at what this package allows you to do.&lt;/p&gt;

&lt;p&gt;Tests in a go program are normally defined along with the source code for the package. Notice below that the test file is names &lt;code&gt;*_test.go&lt;/code&gt; go expects your tests to be named this way.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;myPkg
├── repo.go
├── repo_test.go

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The testing package is built to be used with the &lt;code&gt;go test&lt;/code&gt; command. It looks for tests that are defined in the following way:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func TestXxx(*testing.T)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lets look at a very simple example the first file is &lt;code&gt;sum.go&lt;/code&gt; and the second file &lt;code&gt;sum_test.go&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sum.go&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package myPkg  

Sum(a,b int)int{
    return a + b
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next we have our test for this package. Things to notice here include the package name and the test name:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sum_test.go&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package myPkg_test //notice we name it _test this allows us to work only with the exported api of our package.

import &amp;quot;testing&amp;quot;
import &amp;quot;github.com/maleck13/myPkg&amp;quot;

func TestSum(t *testing.T){
    if 3 != myPkg.Sum(1,2){
        t.Fatalf(&amp;quot;expected the sum to equal %d&amp;quot;,3)
    } 
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;fixtures-mocks-and-stubs&#34;&gt;Fixtures / Mocks and Stubs&lt;/h3&gt;
</description>
    </item>
    
  </channel>
</rss>